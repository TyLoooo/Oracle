索引是应用设计的一个重要方面，太多的索引，DML的性能就会受到影响，如果索引太少，又会影响查询的性能。要找到一个平衡点。

一、索引概述
  B*树索引：传统索引，所有数据库最常用的索引。类似于二叉树，能根据键提供一行或一个行集的快速访问，通常只需很少的读操作就能找到正确的行。
  位图索引：在一颗B*树中，通常索引条目和行之间存在一种一对一的关系，而对于位图索引，一个索引条目则使用一个位图同时指向多行，位图索引适用于高度重复而且通常只读的数据。
二、B*树索引
  叶子节点：B*树最底层的块成为叶子节点或叶子块，其中分别包含各个索引键以及一个rowid（指向所索引的行）；
  分支块：叶子节点之上的内部块称为分支块，这些节点用于在结构中实现导航。
  注意：索引的叶子节点实际上构成了一个双向链表。一旦发现要从叶子节点中的哪里开始，执行值的有序扫描（即索引的区间扫描）就会很容易。
  B*树的特点之一是：所有叶子块都应该在树的同一层上。这一层也称为索引的高度。说明所有从索引的根块到叶子块的遍历都会访问同样数目的块。
  索引是高度平衡的。大多数B*树索引的高度都是2或者3，即使索引中有百万行记录也是如此。
  
  1、索引键压缩
    压缩键索引的基本概念是，每个键条目分解为两部分，前缀和后缀。
  2、索引和表的存储机制
    索引按照索引键的顺序存储，索引会按键的有序顺序进行访问。
    索引指向的块则随机地存储在堆中，因此通过索引访问表时，会执行大量分散、随机的I/O。这种I/O可能很慢。
    索引的此种存储机制决定了索引的两种使用情况。记住，有索引并不代表更快的相应速度。
三、位图索引


    

 
  
